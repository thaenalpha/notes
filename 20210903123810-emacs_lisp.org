:PROPERTIES:
:ID:       0a456788-0402-4b0a-9ab7-d0c15b07066c
:END:
#+title: Emacs Lisp
* Characteristic
+ Only one data structure, list
+ =Mutable= Dynamic value,
  can has side-effects with some functions (like push)
* Special forms
** ' or quote
Any literal to quote will not evaluated and return as is
#+begin_src elisp
hello                                   ;void error
#+end_src
#+begin_src elisp
'hello
(quote hello)
#+end_src
#+RESULTS:
: hello

Can be used to indicate list as a collection not a function call.
#+begin_src elisp
(1 2 3)                                 ;Invalid function: 1
#+end_src
#+begin_src elisp
'(1 2 3)
(quote (1 2 3))
#+end_src
#+RESULTS:
| 1 | 2 | 3 |

It often use to determine a
function/symbol/variable name and list collection (lisp's data structure)

** ` (backquote)
` is similar to ' but can be except for certain places
where expressions are evaluated and inserted or spliced in.
#+begin_src elisp
(setq b `(ba bb bc))                    ; assume b has this value
#+end_src
#+RESULTS:
| ba | bb | bc |
#+begin_src elisp
`(a b c)                                ; backquote acts like quote
#+end_src
#+RESULTS:
| a | b | c |
#+begin_src elisp
`(a ,b c)                               ; insert the value of b
#+end_src
#+RESULTS:
| a | (ba bb bc) | c |
#+begin_src elisp
`(a ,@b c)                              ; splice in the value of b
#+end_src
#+RESULTS:
| a | ba | bb | bc | c |

* Templates
** Turn on/off
#+begin_src elisp
(defun turn-on-function function-name 1) ;off -1
#+end_src

* Core functions
** append and setq
 Note that append doesn't modify the original list - it creates a new list with t
 ed in a variable you need to assign back the new list:
 **** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> (setq x (list 1 2 3))
 (1 2 3)

 ELISP> (setq y (list 4 5 6))
 (4 5 6)

 ELISP> (append x y)
 (1 2 3 4 5 6)

 ELISP> x
 (1 2 3)

 ELISP> (setq x (append x y))
 (1 2 3 4 5 6)

 ELISP> x
 (1 2 3 4 5 6)

** list
Can have any arguments including 0
#+begin_src elisp
(list)
(list 1 2 3)
#+end_src
#+RESULTS:
| 1 | 2 | 3 |
* Buffer, window, frame
** switch-to-buffer-other-window
#+begin_src elisp
(switch-to-buffer-other-window "*test*")
#+end_src
** erase-buffer
#+begin_src elisp
(erase-buffer)                          ; *BECAREFUL*, your data may lost!
#+end_src
** examples
#+begin_src elisp
;; Function that say hello to everyone in the list and return to source window
(setq list-of-names '("Sarah" "Chloe" "Mathilde"))
(defun greeting ()
    (switch-to-buffer-other-window "*test*")
    (erase-buffer)
    (mapcar 'hello list-of-names)
    (other-window 1))

(greeting)
#+end_src
#+RESULTS:

* Data Manipulation
:PROPERTIES:
:ID:       a8ba8cb9-87a5-47df-8b96-8a323810627b
:END:
** Get the first element of this list with `car':
#+begin_src elisp
(setq list-of-names '("Sarah" "Chloe" "Mathilde"))
(car list-of-names)
#+end_src
#+RESULTS:
: Sarah

** Get a list of all but the first element with `cdr':
#+begin_src elisp
(cdr list-of-names)
#+end_src
#+RESULTS:
| Chloe | Mathilde |

** Add an element to the beginning of a list with `push':
#+begin_src elisp
(push "Stephanie" list-of-names)
list-of-names
#+end_src
#+RESULTS:
| Stephanie | Sarah | Chloe | Mathilde |
;; ~NOTE~ `car' and `cdr' don't modify the list, but `push' does.
;; This is an important difference: some functions don't have any
;; side-effects (like `car') while others have (like `push').

** Apply functions to each elements with `mapcar`
#+begin_src elisp
;; Let's call `hello' for each element in `list-of-names':
(mapcar 'hello list-of-names)
Hello Stephanie!
Hello Sarah!
Hello Chloe!
Hello Mathilde!
#+end_src
#+RESULTS:

** Search && replace
#+begin_src elisp
(defun replace-hello-by-bonjour ()
    (switch-to-buffer-other-window "*test*")
    (goto-char (point-min))            ; goes to the beginning of the buffer.
    (while (search-forward "Hello")    ; searches for the string "Hello".
      (replace-match "Bonjour"))       ; replace it with "Bonjour", continue.
    (other-window 1))

(replace-hello-by-bonjour)
#+end_src
;; You should also get an error: "Search failed: Hello".
;;
;; To avoid this error, you need to tell `search-forward' whether it
;; should stop searching at some point in the buffer, and whether it
;; should silently fail when nothing is found:

;; (search-forward "Hello" nil t) does the trick:

;; The `nil' argument says: the search is not bound to a position.
;; The `'t' argument says: silently fail when nothing is found.

;; We use this sexp in the function below, which doesn't throw an error:
#+begin_src elisp
(defun hello-to-bonjour ()
    (switch-to-buffer-other-window "*test*")
    (erase-buffer)
    ;; Say hello to names in `list-of-names'
    (mapcar 'hello list-of-names)
    (goto-char (point-min))
    ;; Replace "Hello" by "Bonjour"
    (while (search-forward "Hello" nil t)
      (replace-match "Bonjour"))
    (other-window 1))

(hello-to-bonjour)
#+end_src
#+RESULTS:
Let's boldify the names:
#+begin_src elisp
(defun boldify-names ()
    (switch-to-buffer-other-window "*test*")
    (goto-char (point-min))
    (while (re-search-forward "Bonjour \\(.+\\)!" nil t) ; regular expression
      (add-text-properties (match-beginning 1)
                           (match-end 1)
                           (list 'face 'bold)))
    (other-window 1))
;; The regular expression is "Bonjour \\(.+\\)!" and it reads:
;; the string "Bonjour ", and
;; a group of            | this is the \\( ... \\) construct
;;   any character       | this is the .
;;   possibly repeated   | this is the +
;; and the "!" string.

;; Ready?  Test it!

(boldify-names)
#+end_src
#+RESULTS:

* Docs
:PROPERTIES:
:ID:       5703a4b3-7cda-4765-aac8-5cd1f7d38b82
:END:
;; If you want to know more about a variable or a function:
;;
;; C-h v a-variable RET
;; C-h f a-function RET
;;
;; To read the Emacs Lisp manual with Emacs:
;;
;; C-h i m elisp RET
;;
;; To read an online introduction to Emacs Lisp:
;; [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html]]
